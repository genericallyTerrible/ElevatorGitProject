/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package ElevatorProj_TestPackage;

import java.awt.Color;
import java.util.ArrayList;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JLabel;
import javax.swing.JPanel;
import javax.swing.UIManager;

/**
 *
 * @author John
 */
public class NewElevatorSystem extends JPanel {
    
    private static final int FLOORS_SPANNED_BY_ELEVATORS = 3;
    private static final Color OPEN_DOOR   = new Color(102,255,102);
    private static final Color CLOSED_DOOR = new Color(255,255,0);
    private static final Color NO_ELEVATOR = UIManager.getColor ("Label.background");
    
    private ArrayList<JLabel> elevator1;
    private ArrayList<JLabel> elevator2;
    private int[] floorTracker = {1, 1};
    private boolean[] doorTracker = {false, false};
    
    /**
     * Creates new form ElevatorShaft
     */
    public NewElevatorSystem() {
        
        elevator1 = new ArrayList<>();
        elevator2 = new ArrayList<>();
        
        initComponents();
        
        elevator1.add(ele1Floor1);
        elevator1.add(ele1Floor2);
        elevator1.add(ele1Floor3);
        elevator2.add(ele2Floor1);
        elevator2.add(ele2Floor2);
        elevator2.add(ele2Floor3);
        
        ele1Floor1.setBackground(OPEN_DOOR);
        ele1Floor1.setText("]  [");
        doorTracker[0] = true;
    }

    
    public void setDoorOpen(int shaftNumber, int floorLevel) {
        floorLevel--; //Decremented by one for ease of working with indexes
        ArrayList<JLabel> thisShaft;
        if(shaftNumber == 1) {
            thisShaft = elevator1;
            doorTracker[0] = true;
        }
        else if(shaftNumber == 2) {
            thisShaft = elevator2;
            doorTracker[1] = true;
        }
        else return; //Was passed an invalid elevator
        
        try {
            Thread.sleep(2000);
        } catch (InterruptedException ex) {
            Logger.getLogger(NewElevatorSystem.class.getName()).log(Level.SEVERE, null, ex);
        }
             
        for(int x = 0; x < FLOORS_SPANNED_BY_ELEVATORS; x++) {
            if( x == floorLevel) {
                thisShaft.get(x).setBackground(OPEN_DOOR);
                thisShaft.get(x).setText("]  [");
            }
            else {
                thisShaft.get(x).setBackground(NO_ELEVATOR);
                thisShaft.get(x).setText("=][=");
            }
        }
    }
    
    public void setDoorClosed(int shaftNumber, int floorLevel) {
        floorLevel--; //Decremented by one for ease of working with indexes
        ArrayList<JLabel> thisShaft;
        if(shaftNumber == 1) {
            thisShaft = elevator1;
            doorTracker[0] = true;
        }
        else if(shaftNumber == 2) {
            thisShaft = elevator2;
            doorTracker[1] = true;
        }
        else return; //Was passed an invalid elevator
        
        try {
            Thread.sleep(2000);
        } catch (InterruptedException ex) {
            Logger.getLogger(NewElevatorSystem.class.getName()).log(Level.SEVERE, null, ex);
        }
             
        for(int x = 0; x < FLOORS_SPANNED_BY_ELEVATORS; x++) {
            if( x == floorLevel) {
                thisShaft.get(x).setBackground(CLOSED_DOOR);
                thisShaft.get(x).setText("=][=");
            }
            else {
                thisShaft.get(x).setBackground(NO_ELEVATOR);
                thisShaft.get(x).setText("=][=");
            }
        }
    }
    
    private void moveElevatorUp(int shaftNumber){
        ArrayList<JLabel> thisShaft;
        int currentFloor;
        
        if(shaftNumber == 1) {
            thisShaft = elevator1;
            currentFloor = floorTracker[0];
        }
        else if(shaftNumber == 2) {
            thisShaft = elevator2;
            currentFloor = floorTracker[1];
        }
        else return; //Was passed an invalid elevator
        
        if(doorTracker[shaftNumber - 1]){
            setDoorClosed(shaftNumber, currentFloor);
        }
        
        
    }
    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        elevator1FloorLabel = new javax.swing.JLabel();
        elevator2FloorLabel = new javax.swing.JLabel();
        ele1Floor3 = new javax.swing.JLabel();
        ele1Floor2 = new javax.swing.JLabel();
        ele1Floor1 = new javax.swing.JLabel();
        ele2Floor3 = new javax.swing.JLabel();
        ele2Floor2 = new javax.swing.JLabel();
        ele2Floor1 = new javax.swing.JLabel();

        elevator1FloorLabel.setFont(new java.awt.Font("Tahoma", 0, 24)); // NOI18N
        elevator1FloorLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        elevator1FloorLabel.setText("#");
        elevator1FloorLabel.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);

        elevator2FloorLabel.setFont(new java.awt.Font("Tahoma", 0, 24)); // NOI18N
        elevator2FloorLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        elevator2FloorLabel.setText("#");
        elevator2FloorLabel.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);

        ele1Floor3.setFont(new java.awt.Font("Tahoma", 0, 24)); // NOI18N
        ele1Floor3.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        ele1Floor3.setText("=][=");
        ele1Floor3.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        ele1Floor3.setOpaque(true);

        ele1Floor2.setFont(new java.awt.Font("Tahoma", 0, 24)); // NOI18N
        ele1Floor2.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        ele1Floor2.setText("=][=");
        ele1Floor2.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        ele1Floor2.setOpaque(true);

        ele1Floor1.setFont(new java.awt.Font("Tahoma", 0, 24)); // NOI18N
        ele1Floor1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        ele1Floor1.setText("=][=");
        ele1Floor1.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        ele1Floor1.setOpaque(true);

        ele2Floor3.setFont(new java.awt.Font("Tahoma", 0, 24)); // NOI18N
        ele2Floor3.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        ele2Floor3.setText("=][=");
        ele2Floor3.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        ele2Floor3.setOpaque(true);

        ele2Floor2.setFont(new java.awt.Font("Tahoma", 0, 24)); // NOI18N
        ele2Floor2.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        ele2Floor2.setText("=][=");
        ele2Floor2.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        ele2Floor2.setOpaque(true);

        ele2Floor1.setFont(new java.awt.Font("Tahoma", 0, 24)); // NOI18N
        ele2Floor1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        ele2Floor1.setText("=][=");
        ele2Floor1.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        ele2Floor1.setOpaque(true);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(ele1Floor1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(ele1Floor2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(ele1Floor3, javax.swing.GroupLayout.PREFERRED_SIZE, 76, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(ele2Floor1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(ele2Floor2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(ele2Floor3, javax.swing.GroupLayout.PREFERRED_SIZE, 76, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(31, 31, 31)
                        .addComponent(elevator1FloorLabel)
                        .addGap(74, 74, 74)
                        .addComponent(elevator2FloorLabel)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(elevator2FloorLabel)
                    .addComponent(elevator1FloorLabel))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(ele2Floor3, javax.swing.GroupLayout.DEFAULT_SIZE, 53, Short.MAX_VALUE)
                    .addComponent(ele1Floor3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(17, 17, 17)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(ele2Floor2, javax.swing.GroupLayout.DEFAULT_SIZE, 53, Short.MAX_VALUE)
                    .addComponent(ele1Floor2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(ele2Floor1, javax.swing.GroupLayout.DEFAULT_SIZE, 53, Short.MAX_VALUE)
                    .addComponent(ele1Floor1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
    }// </editor-fold>//GEN-END:initComponents


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel ele1Floor1;
    private javax.swing.JLabel ele1Floor2;
    private javax.swing.JLabel ele1Floor3;
    private javax.swing.JLabel ele2Floor1;
    private javax.swing.JLabel ele2Floor2;
    private javax.swing.JLabel ele2Floor3;
    private javax.swing.JLabel elevator1FloorLabel;
    private javax.swing.JLabel elevator2FloorLabel;
    // End of variables declaration//GEN-END:variables
}
